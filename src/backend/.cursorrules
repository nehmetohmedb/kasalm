{
  "general": {
    "language": "python",
    "formatting": {
      "line_length": 88,
      "indent_size": 4,
      "quote_style": "double"
    },
    "complexity": {
      "max_function_complexity": 10,
      "max_file_length": 400,
      "max_function_length": 50
    }
  },
  "python": {
    "version": "3.10+",
    "style_guide": "PEP8",
    "frameworks": [
      "FastAPI",
      "SQLAlchemy",
      "Pydantic"
    ],
    "database": {
      "orm": "SQLAlchemy",
      "version": "2.0+",
      "migrations": "Alembic"
    },
    "testing": {
      "framework": "pytest",
      "coverage_target": 80
    }
  },
  "architecture": {
    "pattern": "Clean Architecture",
    "description": "Layered architecture with clear separation of concerns between API, Service, Repository, and Database layers",
    "layers": [
      {
        "name": "API Layer",
        "description": "FastAPI routes and controllers",
        "responsibilities": [
          "Define API endpoints",
          "Handle HTTP requests and responses",
          "Validate request data using Pydantic schemas",
          "Call appropriate service methods",
          "Return validated responses"
        ],
        "directory": "src/api"
      },
      {
        "name": "Service Layer",
        "description": "Business logic implementation",
        "responsibilities": [
          "Implement business rules and workflows",
          "Coordinate operations across repositories",
          "Transform between API schemas and database models",
          "Handle authorization and permissions"
        ],
        "directory": "src/services"
      },
      {
        "name": "Repository Layer",
        "description": "Data access layer",
        "responsibilities": [
          "Abstract database operations (CRUD)",
          "Build and execute database queries",
          "Return domain models or DTOs"
        ],
        "directory": "src/repositories"
      },
      {
        "name": "Database Layer",
        "description": "Database models and connection management",
        "responsibilities": [
          "Define SQLAlchemy models mapping to database tables",
          "Manage database connections and sessions",
          "Define database relationships and constraints"
        ],
        "directory": "src/models"
      }
    ]
  },
  "design_patterns": [
    {
      "name": "Repository Pattern",
      "description": "Abstracts data access with BaseRepository"
    },
    {
      "name": "Unit of Work Pattern",
      "description": "Manages transactions with UnitOfWork"
    },
    {
      "name": "Dependency Injection",
      "description": "Provides dependencies to routes via FastAPI's dependency system"
    },
    {
      "name": "Service Layer Pattern",
      "description": "Encapsulates business logic in dedicated service classes"
    }
  ],
  "models": {
    "base_class": "Base",
    "naming_conventions": {
      "class_names": "PascalCase",
      "table_names": "snake_case",
      "column_names": "snake_case",
      "primary_key": "id",
      "foreign_keys": "{table_name}_id"
    },
    "best_practices": [
      "Keep models simple with minimal business logic",
      "Use type annotations with Mapped[]",
      "Define constraints at the database level",
      "Provide meaningful default values",
      "Add proper documentation with docstrings",
      "Use soft deletes when appropriate"
    ],
    "relationships": [
      "One-to-Many: Define with relationship() and ForeignKey",
      "Many-to-Many: Use association tables with secondary parameter",
      "One-to-One: Use unique constraint on ForeignKey and uselist=False"
    ],
    "field_types": {
      "int": "Integer",
      "float": "Float",
      "str": "String or Text",
      "bool": "Boolean",
      "datetime": "DateTime",
      "date": "Date",
      "dict": "JSON",
      "enum.Enum": "Enum",
      "UUID": "UUID"
    }
  },
  "schemas": {
    "base_class": "BaseModel",
    "naming_conventions": {
      "base_schemas": "Base{Resource}",
      "create_schemas": "{Resource}Create",
      "update_schemas": "{Resource}Update",
      "response_schemas": "{Resource}",
      "internal_schemas": "{Resource}InDB",
      "query_schemas": "{Resource}Query"
    },
    "best_practices": [
      "Define clear schema types for different operations",
      "Use field validation with appropriate constraints",
      "Make update schemas fields optional",
      "Use inheritance for common fields",
      "Document schemas with docstrings and field descriptions",
      "Enable strict type validation",
      "Keep presentation logic out of schemas"
    ],
    "validation": {
      "field_validators": "Use @field_validator for single field validation",
      "model_validators": "Use @model_validator for cross-field validation",
      "basic_validators": "Use Field(..., constraints) for basic validation"
    },
    "configuration": {
      "from_attributes": true,
      "populate_by_name": true,
      "json_schema_extra": "Use for OpenAPI documentation"
    },
    "folder_structure": {
      "organization": "Domain-driven, with subfolders for major domains",
      "directory_pattern": {
        "src/schemas/__init__.py": "Re-exports important schemas",
        "src/schemas/base.py": "Common base schemas and mixins",
        "src/schemas/{domain}/": "Domain-specific schema folder",
        "src/schemas/{domain}/__init__.py": "Re-exports from domain",
        "src/schemas/{domain}/{entity}.py": "Entity-specific schemas",
        "src/schemas/common/": "Shared schemas across domains"
      },
      "common_schemas": {
        "pagination.py": "Pagination-related schemas",
        "responses.py": "Standard response wrappers",
        "filters.py": "Common query filters"
      }
    },
    "file_naming_conventions": {
      "file_case": "snake_case",
      "entity_name": "Singular nouns (item.py not items.py)",
      "related_entities": "Use descriptive suffixes (item_category.py)"
    },
    "file_organization": {
      "imports": "At the top of the file",
      "base_schemas": "Define base schemas first",
      "input_schemas": "Create and Update schemas next",
      "response_schemas": "Response schemas last",
      "ordering": "Simple to complex, general to specific"
    },
    "import_patterns": {
      "re_export": "Use re-exports in __init__.py files for cleaner imports",
      "avoid_circular": "Structure to prevent circular dependencies"
    }
  },
  "file_structure": {
    "src": {
      "api": "API routes organized by domain",
      "core": "Core components, base classes, and utilities",
      "db": "Database setup and session management",
      "models": "SQLAlchemy models organized by domain",
      "repositories": "Repository implementations organized by domain",
      "schemas": "Pydantic schemas organized by domain",
      "services": "Business logic services organized by domain",
      "config": {
        "__description": "Application configuration",
        "logging.py": "Logging configuration settings"
      },
      "utils": "Utility functions",
      "main.py": "Application entry point"
    },
    "tests": {
      "unit": "Unit tests organized by component",
      "integration": "Integration tests organized by feature"
    },
    "migrations": "Alembic migration scripts",
    "logs": "Application log files (excluded from version control)",
    "pyproject.toml": "Dependencies and build settings"
  },
  "documentation": {
    "required_files": [
      "README.md",
      "ARCHITECTURE.md",
      "BEST_PRACTICES.md",
      "MODELS.md",
      "SCHEMAS.md",
      "SCHEMAS_STRUCTURE.md",
      "LOGGING.md",
      "GETTING_STARTED.md"
    ],
    "docstrings": {
      "classes": "Document purpose, attributes, and relationships",
      "functions": "Document parameters, return values, and exceptions",
      "modules": "Document module purpose and contents"
    }
  },
  "dependencies": {
    "core": [
      "fastapi",
      "sqlalchemy>=2.0.0",
      "pydantic>=2.0.0",
      "alembic",
      "uvicorn",
      "python-dotenv"
    ],
    "database": [
      "asyncpg"
    ],
    "testing": [
      "pytest",
      "pytest-asyncio"
    ],
    "dev": [
      "black",
      "isort",
      "mypy",
      "flake8"
    ]
  },
  "logging": {
    "directory": "logs/",
    "configuration": "src/config/logging.py",
    "naming_convention": "{service_name}.{log_level}.{date}.log",
    "gitignore": "logs/* should be added to .gitignore",
    "levels": ["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"],
    "handlers": {
      "file": "Writes logs to files in logs/ directory",
      "console": "Outputs logs to stdout/stderr for development",
      "external": "Optional integration with external logging services"
    }
  }
} 